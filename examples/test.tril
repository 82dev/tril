use std::char

struct Lexer{
  current: u32,
  source: [char],
}

//Trait is a way to group several types
//by defining some common functions that they all implement
trait Num{
  fn add(a: Num, b: Num);
}

//Implement the trait Num for all these types
impl Num for {
  i32,
  i16,
  i8,
  u32,
  u16,
  u8,
};

//Declares an enum that has a generic
//arguement 'T'(a generic type is a type which does not reference any particular type)
//It then specifies the constraint on 'T', i.e. 'T' must implement the trait 'Num'
enum NumOption: T where
T is Num
{
  Some(T), //The enum variant stores a variable of the type 'T'
  None,
}

fn main(args: [str]) -> i32{
  //Constructs Lexer
  //the collect function takes in a [str] and returns a str by concating all its arguements
  //split() takes in a str and outputs a [char]
  let lexer := Lexer{0, args.collect().split()};

  //Declares a variable 'a' with type enum 'NumOption(i32)'
  //Here 'T' is i32
  let a: NumOption(i32) := NumOption::Some(3);
  a := NumOption::None;

  //Throws a type error: Type 'str' does not implement trait 'Num'
  let b: NumOption(u32) := NumOption::Some("hello world");
  
  return 0;
}